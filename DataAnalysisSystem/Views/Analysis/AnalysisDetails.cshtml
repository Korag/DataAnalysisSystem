@model DataAnalysisSystem.DTO.AnalysisDTO.AnalysisDetailsViewModel

@{
    ViewData["Title"] = "Analysis Details";
}

<div class="row" style="margin-top: 5vh; margin-bottom: 2vh">
    <div class="col s12 m10 l8 offset-m1 offset-l2">

        <div class="card" style="display:block;">
            <div class="card-content">
                <span class="card-title center">Analysis Details</span>
                <span class="card-title center teal-text text-lighten-1">@Model.AnalysisName</span>

                <div class="row">
                    <div class="col s6 center">
                        Created at: @Model.DateOfCreation
                    </div>
                    <div class="col s6 center">
                        Indexer: @Model.AnalysisIndexer
                    </div>
                </div>

                @if (Model.UserHasAccessToDataset)
                {
                    <div style="margin-top: 30px">
                        @if (Model.UserIsOwnerOfAnalysis)
                        {
                            <a class="waves-effect right modal-trigger" data-target="modalDeleteAnalysis" style="bottom: 30px"><i class="material-icons" style="color:#b71c1c; margin-top: 10px;">clear</i></a>
                        }
                        <a asp-controller="Dataset" asp-action="DatasetDetails" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect right" style="bottom: 30px"><i class="material-icons teal-text" style="margin-top: 10px;">table_view</i></a>
                    </div>
                }

            </div>

        </div>
    </div>
</div>

<div class="row" style="margin-top: 0vh; margin-bottom:2vh">

    <div id="analysisMethodOverview" class="col s12 m10 l8 offset-m1 offset-l2">
        <div class="card">
            <div class="card-content">
                <span class="card-title center-align" style="margin-bottom:30px">Available analysis methods</span>

                @{await Html.RenderPartialAsync("_AvailableAnalysisMethodsCollapsiblePartial");}

            </div>
        </div>
    </div>
</div>

@if (Model.AnalysisResults.ApproximationResult.IsNull == false)
{
    @await Component.InvokeAsync("DetailsApproximationMethodParameters", Model)
    @await Component.InvokeAsync("DetailsApproximationMethodResults", Model)
}

@if (Model.AnalysisResults.BasicStatisticsResult != null)
{
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodParameters", Model)
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodResults", Model)
}

@if (Model.AnalysisResults.DeriverativeResult != null)
{
    @await Component.InvokeAsync("DetailsDeriverativeMethodParameters", Model)
    @await Component.InvokeAsync("DetailsDeriverativeMethodResults", Model)
}

@if (Model.AnalysisResults.HistogramResult != null)
{
    @await Component.InvokeAsync("DetailsHistogramMethodParameters", Model)
    @await Component.InvokeAsync("DetailsHistogramMethodResults", Model)
}

@if (Model.AnalysisResults.KMeansClusteringResult != null)
{
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodParameters", Model)
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodResults", Model)
}

@if (Model.AnalysisResults.RegressionResult != null)
{
    @await Component.InvokeAsync("DetailsRegressionMethodParameters", Model)
    @await Component.InvokeAsync("DetailsRegressionMethodResults", Model)
}

@await Component.InvokeAsync("ModalPopupWindow", new ModalPopupViewModel
{
    ModalIdentificator = "modalDeleteAnalysis",
    ModalTitle = "Delete Analysis",
    ModalContent = "Are you sure you want to delete this analysis?",

    ControllerName = "Analysis",
    ActionName = "DeleteAnalysis",
    RouteAdditionalArguments = new Dictionary<string, string>
                                                                                    {
                                                                                        { "analysisIdentificator", Model.AnalysisIdentificator }
                                                                                    },
    ModalActAsForm = false,
    LabelOnButton = "Delete"
})

@section Scripts{

    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "approximationParametersDetailsDataTable", LoadingIndicatorId = "approximationParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "basicStatisticsParametersDetailsDataTable", LoadingIndicatorId = "basicStatisticsParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "deriverativeParametersDetailsDataTable", LoadingIndicatorId = "deriverativeParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "histogramParametersDataTable", LoadingIndicatorId = "histogramParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "kMeansClusteringParametersDataTable", LoadingIndicatorId = "kMeansClusteringParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "regressionParametersDataTable", LoadingIndicatorId = "regressionParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}

    @{await Html.RenderPartialAsync("_StopEventPropagationScript");}

    <script>
        $(document).ready(function () {
            $("#modalDeleteAnalysis").modal();
            $('.methodSwitch').show();
            $('#analysisMethodOverview input[type=checkbox]').attr('disabled', true);

            @foreach (var methodName in Model.PerformedAnalysisMethods)
            {
                <text>$('input[value="@methodName"]').attr("checked", true);</text>
            }
        });
    </script>

    @if (Model.AnalysisResults.ApproximationResult.IsNull == false)
    {
        <script>
        @{int z = 0;};
        @{int z1 = 1;};
        @for (var i = 0; i < Model.AnalysisResults.ApproximationResult.AttributeName.Count; i++)
        {
    @:    const approximationLabels_@i = @Html.Raw(Model.AnalysisResults.ApproximationResult.Labels[i]);
    @:    const approximationDatapoints_@z = @Html.Raw(Model.AnalysisResults.ApproximationResult.ApproximatedValuePoints[i]);
    @:    const approximationDatapoints_@z1 = @Html.Raw(Model.AnalysisResults.ApproximationResult.OriginalValuePoints[i]);
    @:    const approximationData_@i = {
    @:        labels: approximationLabels_@i,
    @:        datasets: [
    @:            {
    @:                label: 'Approximation',
    @:                data: approximationDatapoints_@z,
    @:                borderColor: 'red',
    @:                fill: false,
    @:                cubicInterpolationMode: 'none',
    @:                tension: 0.5
    @:            }, {
    @:                label: 'Data point',
    @:                data: approximationDatapoints_@z1,
    @:                borderColor: 'blue',
    @:                fill: false,
    @:                showLine: false,
    @:                tension: 0.0
    @:            }
    @:        ]
    @:    };
    @:
    @:    const approximationConfig_@i = {
    @:        type: 'line',
    @:        data: approximationData_@i,
    @:        options: {
    @:            title: {
    @:                display: true,
    @:                text: 'Approximation Chart'
    @:            },
    @:            responsive: true,
    @:            plugins: {
    @:                title: {
    @:                    align: 'start',
    @:                    display: true,
    @:                    text: 'Approximation Chart'
    @:                },
    @:                legend:
    @:                      {
    @:                        align: 'start',
    @:                      }
    @:                },
    @:            interaction: {
    @:                intersect: false,
    @:            },
    @:            scales: {
    @:                x: {
    @:                    display: true,
    @:                    title: {
    @:                        display: true,
    @:                        position: 'left',
    @:                        align: 'start',
    @:                        text: 'X'
    @:                    }
    @:                },
    @:                y: {
    @:                    display: true,
    @:                    title: {
    @:                        display: true,
    @:                        text: @Html.Raw(Model.AnalysisResults.ApproximationResult.AttributeName[i])
    @:                    }
    @:                }
    @:            }
    @:        },
    @:    };
    @:
    @:    var approximationChart_@i = new Chart(
    @:        document.getElementById('approximationChart_@i'),
    @:        approximationConfig_@i
    @:    );
         z++; z++;
         z1++; z1++;
        }

        </script>
    }

    @if (Model.AnalysisResults.DeriverativeResult.IsNull == false)
    {
        <script>
        @{int z2 = 0;};
        @{int z3 = 1;};
        @{int z4 = 2;};
        @{int z5 = 3;};
        @for (var i = 0; i < Model.AnalysisResults.DeriverativeResult.AttributeName.Count; i++)
        {
    @:    const deriverativeLabels_@i = @Html.Raw(Model.AnalysisResults.DeriverativeResult.Labels[i]);
    @:    const deriverativeDatapoints_@z2 = @Html.Raw(Model.AnalysisResults.DeriverativeResult.FirstDeriverative[i]);
    @:    const deriverativeDatapoints_@z3 = @Html.Raw(Model.AnalysisResults.DeriverativeResult.SecondDeriverative[i]);
    @:    const deriverativeDatapoints_@z4 = @Html.Raw(Model.AnalysisResults.DeriverativeResult.OriginalValuePoints[i]);
    @:    const deriverativeDatapoints_@z5 = @Html.Raw(Model.AnalysisResults.DeriverativeResult.ApproximatedValuePoints[i]);
    @:    const deriverativeData_@i = {
    @:        labels: deriverativeLabels_@i,
    @:        datasets: [
    @:            {
    @:                label: 'First deriverative',
    @:                data: deriverativeDatapoints_@z2,
    @:                borderColor: 'black',
    @:                fill: false,
    @:                cubicInterpolationMode: 'none',
    @:                tension: 0.5
    @:            },
    @:            {
    @:                label: 'Second deriverative',
    @:                data: deriverativeDatapoints_@z3,
    @:                borderColor: 'green',
    @:                fill: false,
    @:                tension: 0.5
    @:            },
    @:            {
    @:                label: 'Data point',
    @:                data: deriverativeDatapoints_@z4,
    @:                borderColor: 'blue',
    @:                fill: false,
    @:                showLine: false,
    @:                tension: 0.0
    @:            },
    @:            {
    @:                label: 'Approximation',
    @:                data: deriverativeDatapoints_@z5,
    @:                borderColor: 'red',
    @:                fill: false,
    @:                cubicInterpolationMode: 'none',
    @:                tension: 0.5,
    @:                hidden: true
    @:            },
    @:        ]
    @:    };
    @:
    @:    const deriverativeConfig_@i = {
    @:        type: 'line',
    @:        data: deriverativeData_@i,
    @:        options: {
    @:            title: {
    @:                display: true,
    @:                text: 'Deriverative Chart'
    @:            },
    @:            responsive: true,
    @:            plugins: {
    @:                title: {
    @:                    align: 'start',
    @:                    display: true,
    @:                    text: 'Deriverative Chart'
    @:                },
    @:                legend:
    @:                      {
    @:                        align: 'start',
    @:                      }
    @:                },
    @:            interaction: {
    @:                intersect: false,
    @:            },
    @:            scales: {
    @:                x: {
    @:                    display: true,
    @:                    title: {
    @:                        display: true,
    @:                        position: 'left',
    @:                        align: 'start',
    @:                        text: 'X'
    @:                    }
    @:                },
    @:                y: {
    @:                    display: true,
    @:                    title: {
    @:                        display: true,
    @:                        text: @Html.Raw(Model.AnalysisResults.DeriverativeResult.AttributeName[i])
    @:                    }
    @:                }
    @:            }
    @:        },
    @:    };
    @:
    @:    var deriverativeChart_@i = new Chart(
    @:        document.getElementById('deriverativeChart_@i'),
    @:        deriverativeConfig_@i
    @:    );
         z2++; z2++; z2++; z2++;
            z3++; z3++; z3++; z3++;
            z4++; z4++; z4++; z4++;
            z5++; z5++; z5++; z5++;
        }

        </script>
    }

}

@section Notification
{
    @{await Html.RenderPartialAsync("_NotificationMenuMessage", new NotificationMenuViewModel { NotificationContainerId = "notificationContainer" });}
}

