@model DataAnalysisSystem.DTO.AnalysisDTO.AnalysisDetailsViewModel

@{
    ViewData["Title"] = "Analysis Details";
}

<div class="row" style="margin-top: 5vh; margin-bottom: 2vh">
    <div class="col s12 m10 l8 offset-m1 offset-l2">

        <div class="card" style="display:block;">
            <div class="card-content">
                <span class="card-title center">Analysis Details</span>
                <span class="card-title center teal-text text-lighten-1">@Model.AnalysisName</span>

                <div class="row">
                    <div class="col s6 center">
                        Created at: @Model.DateOfCreation
                    </div>
                    <div class="col s6 center">
                        Indexer: @Model.AnalysisIndexer
                    </div>
                </div>

                @if (Model.UserHasAccessToDataset)
                {
                    <div style="margin-top: 30px">
                        @if (Model.UserIsOwnerOfAnalysis)
                        {
                            <a class="waves-effect right modal-trigger" data-target="modalDeleteAnalysis" style="bottom: 30px"><i class="material-icons" style="color:#b71c1c; margin-top: 10px;">clear</i></a>
                        }
                        <a asp-controller="Dataset" asp-action="DatasetDetails" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect right" style="bottom: 30px"><i class="material-icons teal-text" style="margin-top: 10px;">table_view</i></a>
                    </div>
                }

            </div>

        </div>
    </div>
</div>

<div class="row" style="margin-top: 0vh; margin-bottom:2vh">

    <div id="analysisMethodOverview" class="col s12 m10 l8 offset-m1 offset-l2">
        <div class="card">
            <div class="card-content">
                <span class="card-title center-align" style="margin-bottom:30px">Available analysis methods</span>

                @{await Html.RenderPartialAsync("_AvailableAnalysisMethodsCollapsiblePartial");}

            </div>
        </div>
    </div>
</div>

@if (Model.AnalysisResults.ApproximationResult != null)
{
    @await Component.InvokeAsync("DetailsApproximationMethodParameters", Model)
    @await Component.InvokeAsync("DetailsApproximationMethodResults", Model)
}

@if (Model.AnalysisResults.BasicStatisticsResult != null)
{
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodParameters", Model)
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodResults", Model)
}

@if (Model.AnalysisResults.DeriverativeResult != null)
{
    @await Component.InvokeAsync("DetailsDeriverativeMethodParameters", Model)
    @await Component.InvokeAsync("DetailsDeriverativeMethodResults", Model)
}

@if (Model.AnalysisResults.HistogramResult != null)
{
    @await Component.InvokeAsync("DetailsHistogramMethodParameters", Model)
    @await Component.InvokeAsync("DetailsHistogramMethodResults", Model)
}

@if (Model.AnalysisResults.KMeansClusteringResult != null)
{
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodParameters", Model)
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodResults", Model)
}

@if (Model.AnalysisResults.RegressionResult != null)
{
    @await Component.InvokeAsync("DetailsRegressionMethodParameters", Model)
    @await Component.InvokeAsync("DetailsRegressionMethodResults", Model)
}

@await Component.InvokeAsync("ModalPopupWindow", new ModalPopupViewModel
                                                {
                                                 ModalIdentificator = "modalDeleteAnalysis",
                                                 ModalTitle = "Delete Analysis",
                                                 ModalContent = "Are you sure you want to delete this analysis?",

                                                 ControllerName = "Analysis",
                                                 ActionName = "DeleteAnalysis",
                                                 RouteAdditionalArguments = new Dictionary<string, string>
                                                                                    {
                                                                                        { "analysisIdentificator", Model.AnalysisIdentificator }
                                                                                    },
                                                 ModalActAsForm = false,
                                                 LabelOnButton = "Delete"
                                                })

@section Scripts{

    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "approximationParametersDetailsDataTable", LoadingIndicatorId = "approximationParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "basicStatisticsParametersDetailsDataTable", LoadingIndicatorId = "basicStatisticsParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "deriverativeParametersDetailsDataTable", LoadingIndicatorId = "deriverativeParametersDetailsDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "histogramParametersDataTable", LoadingIndicatorId = "histogramParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "kMeansClusteringParametersDataTable", LoadingIndicatorId = "kMeansClusteringParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "regressionParametersDataTable", LoadingIndicatorId = "regressionParametersDataTableLoadingIndicator", EmptyDataAnnotation = "Chosen columns" });}

    @{await Html.RenderPartialAsync("_StopEventPropagationScript");}

    <script>
        $(document).ready(function () {
            $("#modalDeleteAnalysis").modal();
            $('.methodSwitch').show();
            $('#analysisMethodOverview input[type=checkbox]').attr('disabled', true);

            @foreach (var methodName in Model.PerformedAnalysisMethods)
            {
                <text>$('input[value="@methodName"]').attr("checked", true);</text>
            }
        });
    </script>

    <script>

        const DATA_COUNT = 12;
        const labels = [];
        for (let i = 0; i < DATA_COUNT; ++i) {
            labels.push(i.toString());
        }
        const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];
        const data = {
            labels: labels,
            datasets: [
                {
                    label: 'Cubic interpolation (monotone)',
                    data: datapoints,
                    borderColor: 'red',
                    fill: false,
                    cubicInterpolationMode: 'none',
                    tension: 0.4
                }, {
                    label: 'Cubic interpolation',
                    data: datapoints,
                    borderColor: 'blue',
                    fill: false,
                    tension: 0.4
                }
            ]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                title: {
                    display: true,
                    text: 'Custom Chart Title'
                },
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Chart.js'
                    },
                },
                interaction: {
                    intersect: false,
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'TEST TEST'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Value'
                        },
                        suggestedMin: -10,
                        suggestedMax: 200
                    }
                }
            },
        };

        var myChart = new Chart(
            document.getElementById('test'),
            config
        );

    </script>

}

@section Notification
{
    @{await Html.RenderPartialAsync("_NotificationMenuMessage", new NotificationMenuViewModel { NotificationContainerId = "notificationContainer" });}
}