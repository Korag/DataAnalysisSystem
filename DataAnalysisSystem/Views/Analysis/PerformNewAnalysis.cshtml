@model DataAnalysisSystem.DTO.AnalysisDTO.PerformNewAnalysisViewModel

@{
    ViewData["Title"] = "Perform Analysis";
}

<form id="PerformNewAnalysis" method="post" asp-action="PerformNewAnalysis" asp-controller="Analysis" enctype="multipart/form-data" onsubmit="openModalWaiter(event)">

    <div class="row" style="margin-top: 5vh; margin-bottom: 2vh">
        <div class="col s12 m10 l8 offset-m1 offset-l2">

            <div class="card" style="display:block;">
                <div class="card-content">
                    <span class="card-title center">Perform analysis</span>

                    <div class="center-align" style="margin-top: 30px">

                        <div class="input-field" style="width:70%; margin:auto;">

                            <i class="material-icons prefix">input</i>
                            <input type="text" asp-for="AnalysisName" required="" aria-required="true" class="validate">
                            <label asp-for="AnalysisName"></label>

                            <span asp-validation-for="AnalysisName" class="helper-text" style="color: #F44336; text-align:left"></span>
                        </div>

                        <button class="btn waves-effect waves-light" type="submit" id="submitButton" style="margin-left:24px;">
                            Analyze
                        </button>

                        <a asp-controller="Dataset" asp-action="DatasetDetails" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect right"><i class="material-icons teal-text" style="margin-top: 10px">table_view</i></a>
                    </div>


                    <div class="center-align">
                        <span id="checkboxValidationInfo" class="helper-text" style="color: #F44336; text-align:left; display:none">Not enough checkboxes were selected.</span>
                    </div>

                </div>

            </div>
        </div>

    </div>

    <div class="row" style="margin-top: 0vh; margin-bottom:2vh">

        <div id="analysisMethodOverview" class="col s12 m10 l8 offset-m1 offset-l2">
            <div class="card">
                <div class="card-content">
                    <span class="card-title center-align" style="margin-bottom:30px">Available analysis methods</span>

                    @{await Html.RenderPartialAsync("_AvailableAnalysisMethodsCollapsiblePartial");}

                </div>
            </div>
        </div>
    </div>

    <input type="text" asp-for="DatasetIdentificator" hidden readonly>

    <div id="divApproximationMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddApproximationMethodParameters", Model)
    </div>

    <div id="divBasicStatisticsMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddBasicStatisticsMethodParameters", Model)
    </div>

    <div id="divDeriverativeMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddDeriverativeMethodParameters", Model)
    </div>

    <div id="divHistogramMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddHistogramMethodParameters", Model)
    </div>

    <div id="divKMeansClusteringMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddKMeansClusteringMethodParameters", Model)
    </div>

    <div id="divRegressionMethodParameters" style="display: none">
        @await Component.InvokeAsync("AddRegressionMethodParameters", Model)
    </div>

</form>

@await Component.InvokeAsync("ModalBottomSheetWindow", new ModalBottomSheetViewModel
   {
       ModalIdentificator = "modalWaiter",
       ModalHeader = "Performing analysis.",
       ModalPrimaryText = "This may take a while."
   })

@section Scripts{

    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addBasicStatisticsParametersDataTable", LoadingIndicatorId = "addBasicStatisticsDataTableLoadingIndicator", EmptyDataAnnotation = "Choose columns to perform operation" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addHistogramParametersDataTable", LoadingIndicatorId = "addHistogramDataTableLoadingIndicator", EmptyDataAnnotation = "Choose columns to perform operation" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addKMeansClusteringParametersDataTable", LoadingIndicatorId = "addKMeansClusteringDataTableLoadingIndicator", EmptyDataAnnotation = "Choose exactly 2 columns" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addApproximationParametersDataTable", LoadingIndicatorId = "addApproximationDataTableLoadingIndicator", EmptyDataAnnotation = "Choose columns to perform operation" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addDeriverativeParametersDataTable", LoadingIndicatorId = "addDeriverativeDataTableLoadingIndicator", EmptyDataAnnotation = "Choose columns to perform operation" });}
    @{await Html.RenderPartialAsync("_DataTableOnlyHeaderWLoadingIndicatorInitScript", new DataTableOnlyHeaderWLoadingIndicatorViewModel { DataTableId = "addRegressionParametersDataTable", LoadingIndicatorId = "addRegressionDataTableLoadingIndicator", EmptyDataAnnotation = "Choose exactly 2 columns" });}

    @{await Html.RenderPartialAsync("_ModalBottomSheetScript", new ModalBottomSheetScriptViewModel { ModalIdentificator = "modalWaiter", ModalDismissible = false });}
    @{await Html.RenderPartialAsync("_ValidateFormWithCheckboxesAndOpenModalScript", new ValidateFormWithCheckboxesAndOpenModalScriptViewModel
        {
            FormId = "PerformNewAnalysis",
            ModalId = "modalWaiter",
            ValidationContainerId = "checkboxValidationInfo",
            CheckboxesToLimitValidation = new List<CheckboxLimiterValidationScriptViewModel>
        () { new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".kMeansCheck", MinAmountOfCheckedCheckboxes = 2, CheckboxContainerId = "divKMeansClusteringMethodParameters" }, new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".deriverativeCheck", MinAmountOfCheckedCheckboxes = 1, CheckboxContainerId = "divDeriverativeMethodParameters" }
      ,new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".approxCheck", MinAmountOfCheckedCheckboxes = 1, CheckboxContainerId = "divApproximationMethodParameters" }, new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".basicStatCheck", MinAmountOfCheckedCheckboxes = 1, CheckboxContainerId = "divBasicStatisticsMethodParameters" }
      ,new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".histCheck", MinAmountOfCheckedCheckboxes = 1, CheckboxContainerId = "divHistogramMethodParameters" }, new CheckboxLimiterValidationScriptViewModel() { CheckboxClass = ".regrCheck", MinAmountOfCheckedCheckboxes = 1, CheckboxContainerId = "divRegressionMethodParameters" }}
        });}
    @{await Html.RenderPartialAsync("_StopEventPropagationScript");}

    <script>
        $(document).ready(function () {
            $('.methodSwitch').show();

            //SelectAll('histCheck');
            //SelectAll('basicStatCheck');
            //SelectAll('approxCheck');
            //SelectAll('deriverativeCheck');

        @if (Model.SelectedAnalysisMethods.Length != 0) {
            foreach (var methodName in Model.SelectedAnalysisMethods)
            {
                <text>$('#@methodName').click();</text>
            }
        }

        });
    </script>

    <script>
        function ChangeVisibilityOfParametersDiv(divId) {
            if ($('#' + divId).css('display') == 'none') {
                $('#' + divId).css("display", "block");
                $($.fn.dataTable.tables(true)).DataTable()
                    .columns.adjust();
            }
            else {
                $('#' + divId).css("display", "none");
            }
        }

        function SelectAll(checkboxClass) {
            $(`.${checkboxClass}`).prop("checked", true);
        }

        function DeselectAll(checkboxClass) {
            $(`.${checkboxClass}`).prop("checked", false);
        }
    </script>

    @{await Html.RenderPartialAsync("_CheckboxCheckedLimiterScript", new CheckboxCheckedLimiterScriptViewModel { CheckboxClass = ".kMeansCheck", CheckedElementsLimit = 2 });}
    @{await Html.RenderPartialAsync("_CheckboxCheckedLimiterScript", new CheckboxCheckedLimiterScriptViewModel { CheckboxClass = ".regrCheck", CheckedElementsLimit = 2 });}
}

@section Notification
{
    @{await Html.RenderPartialAsync("_NotificationMenuValidationAndMessage", new NotificationMenuViewModel { NotificationContainerId = "notificationContainer" });}
}
