@model DataAnalysisSystem.DTO.AnalysisDTO.SharedAnalysisDetailsViewModel

@{
    ViewData["Title"] = "Analysis Details";
}

<div class="row" style="margin-top: 5vh; margin-bottom: 2vh">
    <div class="col s12 m10 l8 offset-m1 offset-l2">

        <div class="card" style="display:block;">
            <div class="card-content">
                <span class="card-title center">Analysis Details</span>
                <span class="card-title center teal-text text-lighten-1">@Model.AnalysisIndexer</span>

                <div class="row">
                    <div class="col s6 center offset-s3">
                        Created at: @Model.DateOfCreation
                    </div>
                </div>

                @if (Model.UserHasAccessToDataset)
                {
                    <div style="margin-top: 30px">
                        <a asp-controller="Dataset" asp-action="DatasetDetails" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect right" style="bottom: 30px"><i class="material-icons teal-text" style="margin-top: 10px;">table_view</i></a>
                    </div>
                }

            </div>

        </div>
    </div>
</div>

@if (Model.AnalysisResults.ApproximationResult != null)
{
    @await Component.InvokeAsync("DetailsApproximationMethodParameters", Model.AnalysisParameters.ApproximationParameters)
    @await Component.InvokeAsync("DetailsApproximationMethodResults", Model.AnalysisResults.ApproximationResult)
}

@if (Model.AnalysisResults.BasicStatisticsResult != null)
{
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodParameters", Model.AnalysisParameters.BasicStatisticsParameters)
    @await Component.InvokeAsync("DetailsBasicStatisticsMethodResults", Model.AnalysisResults.BasicStatisticsResult)
}

@if (Model.AnalysisResults.DeriverativeResult != null)
{
    @await Component.InvokeAsync("DetailsDeriverativeMethodParameters", Model.AnalysisParameters.DeriverativeParameters)
    @await Component.InvokeAsync("DetailsDeriverativeMethodResults", Model.AnalysisResults.DeriverativeResult)
}

@if (Model.AnalysisResults.HistogramResult != null)
{
    @await Component.InvokeAsync("DetailsHistogramMethodParameters", Model.AnalysisParameters.HistogramParameters)
    @await Component.InvokeAsync("DetailsHistogramMethodResults", Model.AnalysisResults.HistogramResult)
}

@if (Model.AnalysisResults.KMeansClusteringResult != null)
{
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodParameters", Model.AnalysisParameters.KMeansClusteringParameters)
    @await Component.InvokeAsync("DetailsKMeansClusteringMethodResults", Model.AnalysisResults.KMeansClusteringResult)
}

@if (Model.AnalysisResults.RegressionResult != null)
{
    @await Component.InvokeAsync("DetailsRegressionMethodParameters", Model.AnalysisParameters.RegressionParameters)
    @await Component.InvokeAsync("DetailsRegressionMethodResults", Model.AnalysisResults.RegressionResult)
}


<div class="fixed-action-btn" style="margin-bottom:10px">
    <a asp-controller="Dataset" asp-action="SharedDatasetDetails" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="btn-floating btn-large waves-effect waves-teal">
        <i class="large material-icons">print</i>
    </a>
</div>

@section Scripts{

    <script>
        $(document).ready(function () {
            $('.methodSwitch').show();
            $('#analysisMethodOverview input[type=checkbox]').attr('disabled', true);

            @foreach (var methodName in Model.PerformedAnalysisMethods)
            {
                <text>$('input[value="@methodName"]').attr("checked", true);</text>
            }
        });
    </script>
}

@section Notification
{
    @{await Html.RenderPartialAsync("_NotificationMenuMessage", new NotificationMenuViewModel { NotificationContainerId = "notificationContainer" });}
}

