@model DataAnalysisSystem.DTO.DatasetDTO.DatasetDetailsViewModel
@using DataAnalysisSystem.DTO.AdditionalFunctionalities
@using DataAnalysisSystem.DTO.Scripts

@{
    ViewData["Title"] = "Dataset Details";
}

<div class="row">
    <div class="col s8 offset-s2">

        <div class="card" style="display:block; margin-bottom: 5vh">
            <div class="card-content">
                <span class="card-title center">Dataset Details</span>
                <span class="card-title center teal-text text-lighten-1">@Model.DatasetName</span>

                <div class="row">
                    <div class="col s6 center">
                        Created at: @Model.DateOfCreation
                    </div>
                    <div class="col s6 center">
                        Edited at: @Model.DateOfEdition
                    </div>
                </div>

                <div class="center-align" style="margin-top: 10px">
                    <a asp-controller="Analysis" asp-action="AnalyseDataset" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="btn waves-effect waves-teal" style="margin-left:24px;">Analyze</a>

                    <a href="#!" data-target="options-list2" class="dropdown-trigger waves-effect right"><i class="material-icons" style="color:black">more_horiz</i></a>

                    <div id="options-list2" class="dropdown-content">
                        <div class="col s12">
                            <div class="options-container">
                                <div class="single-option">
                                    <a asp-controller="Dataset" asp-action="ExportDataset" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect waves-light btn light-blue darken-4 white-text" style="width:140px">Export</a>
                                </div>
                                <div class="single-option">
                                    <a asp-controller="Dataset" asp-action="EditDataset" asp-route-datasetIdentificator="@Model.DatasetIdentificator" class="waves-effect waves-light btn amber darken-2 white-text" style="width:140px" onclick="openModalWaiter()">Edit</a>
                                </div>
                                <div class="single-option">
                                    <a class="waves-effect waves-dark btn red darken-4 white-text modal-trigger" data-target="modalDeleteDataset" style="width:140px">Delete</a>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>

            </div>

        </div>
    </div>
</div>

<div class="row">
    <div class="col s10 offset-s1">

        <div class="card" style="display:block; margin-bottom: 5vh">
            <div class="card-content">
                <span class="card-title center">Dataset Statitstics</span>

                <div class="row">
                    <div class="col 8 center">
                        <div class="col 6 center">
                            <input type="text" asp-for="DatasetStatistics.NumberOfRows" style="text-align:center" readonly>
                            <label asp-for="DatasetStatistics.NumberOfRows"></label>
                        </div>
                        <div class="col 6 center">
                            <input type="text" asp-for="DatasetStatistics.NumberOfColumns" style="text-align:center" readonly>
                            <label asp-for="DatasetStatistics.NumberOfColumns"></label>
                        </div>
                    </div>
                    <div class="col 4 center">
                        <div>
                            <canvas id="myChart"></canvas>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col 8 center">
                        <div class="col 12 center">
                            <input type="text" asp-for="DatasetStatistics.NumberOfMissingValues" style="text-align:center" readonly>
                            <label asp-for="DatasetStatistics.NumberOfMissingValues"></label>
                        </div>
                    </div>
                    <div class="col 4 center">
                        <div>
                            <canvas id="myChart2"></canvas>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col s12 center">
                        <div class="col s6 center">
                            <input type="text" asp-for="DatasetStatistics.InputFileName" style="text-align:center" readonly>
                            <label asp-for="DatasetStatistics.InputFileName"></label>
                        </div>
                        <div class="col s6 center">
                            <input type="text" asp-for="DatasetStatistics.InputFileFormat" style="text-align:center" readonly>
                            <label asp-for="DatasetStatistics.InputFileFormat"></label>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>

<div class="row">
    <div class="col s12">

        <div class="card" style="display:block; margin-bottom: 5vh">
            <div class="card-content">
                <span class="card-title center">Dataset content</span>

                <table id="table-custom-elements" class="row-border" style="text-align:center" cellspacing="0" width="100%">
                    <thead>

                        <tr>
                            @for (int i = 0; i < Model.DatasetContent.NumberColumns.Count() + Model.DatasetContent.StringColumns.Count(); i++)
                            {
                                var numberColumn = Model.DatasetContent.NumberColumns.Where(z => z.PositionInDataset == i).FirstOrDefault();

                                if (numberColumn != null)
                                {
                                    <th>@numberColumn.AttributeName</th>
                                }
                                else
                                {
                                    var stringColumn = Model.DatasetContent.StringColumns.Where(z => z.PositionInDataset == i).FirstOrDefault();
                                    <th>@stringColumn.AttributeName</th>
                                }
                            }
                        </tr>

                    </thead>
                    <tbody>

                        @for (int i = 0; i < Model.DatasetContent.NumberColumns.FirstOrDefault().AttributeValue.Count(); i++)
                        {
                            var n = 0;
                            var s = 0;

                            <tr>
                                @for (int j = 0; j < Model.DatasetContent.NumberColumns.Count() + Model.DatasetContent.StringColumns.Count(); j++)
                                {
                                    var numberColumn = Model.DatasetContent.NumberColumns.Where(z => z.PositionInDataset == j).FirstOrDefault();
                                    var position = Model.DatasetContent.NumberColumns.Where(z => z.PositionInDataset == j).FirstOrDefault();

                                    if (numberColumn != null)
                                    {
                                        <td>
                                            @numberColumn.AttributeValue[i]
                                            @{n++;}
                                        </td>
                                    }
                                    else
                                    {
                                        var stringColumn = Model.DatasetContent.StringColumns.Where(z => z.PositionInDataset == j).FirstOrDefault();

                                        <td>
                                            @stringColumn.AttributeValue[i]
                                            @{s++;}
                                        </td>
                                    }
                                }
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Analyses List with action -->
<!-- #region Logout Modal -->
@await Component.InvokeAsync("ModalPopupWindow", new ModalPopupViewModel
                                                {
                                                 ModalIdentificator = "modalDeleteDataset",
                                                 ModalTitle = "Delete Dataset",
                                                 ModalContent = "Are you sure you want to delete this dataset and all the analyses associated with it?",

                                                 ControllerName = "Dataset",
                                                 ActionName = "DeleteDataset",
                                                 RouteAdditionalArguments = new Dictionary<string, string>
                                                                                    {
                                                                                        { "datasetIdentificator", Model.DatasetIdentificator }
                                                                                    },
                                                 ModalActAsForm = false,
                                                 LabelOnButton = "Delete"
                                                })

@await Component.InvokeAsync("ModalBottomSheetWindow", new ModalBottomSheetViewModel
       {
           ModalIdentificator = "modalWaiter",
           ModalHeader = "Preparing a dataset.",
           ModalPrimaryText = "This may take a while."
       })

@section Scripts{

    @{await Html.RenderPartialAsync("_ModalBottomSheetScript", new ModalBottomSheetScriptViewModel { ModalIdentificator = "modalWaiter", ModalDismissible = false });}

    <script>

        $(document).ready(function () {
            $('.collapsible').collapsible();
        });

        $(document).ready(function () {
            $("#table-custom-elements").DataTable({ processing: true, language: { search: "", searchPlaceholder: "Enter search term" }, order: [0, "asc"], dom: 'ft<"footer-wrapper"l<"paging-info"ip>>', /*columnDefs: [{ "className": "dt-center", "targets": "_all" }],*/ scrollX: true, scrollCollapse: !0, pagingType: "full_numbers", drawCallback: function (t) { var e = this.api(); $(e.table().container()).find(".paginate_button").addClass("waves-effect"), e.table().columns.adjust() } });
            jQuery("select").not(".disabled").formSelect();

        });

        $("#modalDeleteDataset").modal(), $(".scrollspy").scrollSpy();

        function openModalWaiter() {
            $('#modalWaiter').modal('open');
        }

    </script>

    <script>
        var ctx = document.getElementById('myChart').getContext('2d');

        var myDoughnutChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Number', 'String'],
                datasets: [{
                    label: '# of Attributes',
                    data: @Html.Raw(Model.DatasetStatistics.AttributesDistribution),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)'
                    ],
                    borderWidth: 1
                }]
            }
        });

        var btx = document.getElementById('myChart2').getContext('2d');

        var myBarChart = new Chart(btx, {
            type: 'horizontalBar',
            data: {
                labels: ['Missing values percentage'],
                datasets: [{
                    label: 'Percentage',
                    data: @Html.Raw(Model.DatasetStatistics.MissingValuePercentage),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    xAxes: [{
                        display: true,
                        stacked: true,
                        ticks: {
                            min: 0,
                            max: 100
                        }
                    }]
                }
            }
        });
    </script>
}

@section Notification
{
    <div class="row">
        <div class="col s8 offset-s2">

            @if (ViewData["Message"] != null)
            {

                <h2 class="alert alert-info" role="alert">@ViewData["Message"]</h2>
            }

        </div>
    </div>
}